#!/bin/sh

# Husky commit-msg hook to enforce Conventional Commits

COMMIT_MSG_FILE="$1"
COMMIT_MSG=$(head -1 "$COMMIT_MSG_FILE")

# Allow commits that start with "Merge" or "Revert"
if echo "$COMMIT_MSG" | grep -qE "^(Merge|Revert)"; then
    exit 0
fi

# Define the commit message patterns
TYPE_PATTERN="^(enhance|feat|fix|chore|docs|test|style|refactor|perf|build|ci|revert)"
SCOPE_PATTERN="(\([a-zA-Z0-9_-]+\))?"
SEPARATOR_PATTERN=": "
SUBJECT_PATTERN=".{1,88}$"
FULL_PATTERN="$TYPE_PATTERN$SCOPE_PATTERN$SEPARATOR_PATTERN$SUBJECT_PATTERN"

# Check for empty commit messages
if [ -z "$COMMIT_MSG" ]; then
    echo "\033[31mERROR: Commit message cannot be empty.\033[0m" >&2
    exit 1
fi

# Function to print detailed error messages
print_error() {
    echo "\033[31mERROR: $1\033[0m" >&2
    echo "" >&2
    echo "Your commit message:" >&2
    echo "  \"$COMMIT_MSG\"" >&2
    echo "" >&2
    echo "Expected format:" >&2
    echo "  <type>(<scope>): <subject>" >&2
    echo "" >&2
    echo "Where:" >&2
    echo "  <type>    : One of feat, fix, chore, docs, test, style, refactor, perf, build, ci, revert" >&2
    echo "  <scope>   : Optional, specifies the scope of the change (e.g., component or file name)" >&2
    echo "  <subject> : A short description of the change (max 88 characters)" >&2
    echo "" >&2
    echo "Examples:" >&2
    echo "  feat(parser): add ability to parse arrays" >&2
    echo "  fix(login): handle login error" >&2
    echo "" >&2
    echo "Please see https://www.conventionalcommits.org/ for more information." >&2
}

# Check if commit message matches the full pattern
if ! echo "$COMMIT_MSG" | grep -qE "$FULL_PATTERN"; then

    # Check if the type is invalid
    if ! echo "$COMMIT_MSG" | grep -qE "$TYPE_PATTERN"; then
        print_error "Invalid commit type. Allowed types are: feat, fix, chore, docs, test, style, refactor, perf, build, ci, revert."
        exit 1
    fi

    # Check if the scope is incorrectly formatted
    if echo "$COMMIT_MSG" | grep -qE "$TYPE_PATTERN\([^\)]*$"; then
        print_error "Invalid scope format. Scope must be alphanumeric and enclosed in parentheses."
        exit 1
    fi

    # Check if the separator is missing
    if ! echo "$COMMIT_MSG" | grep -qE "$TYPE_PATTERN$SCOPE_PATTERN$SEPARATOR_PATTERN"; then
        print_error "Missing colon and space after type and scope. Expected format: <type>(<scope>): <subject>"
        exit 1
    fi

    # Check if the subject is missing
    SUBJECT=$(echo "$COMMIT_MSG" | sed -E "s/$TYPE_PATTERN$SCOPE_PATTERN$SEPARATOR_PATTERN//")
    if [ -z "$SUBJECT" ]; then
        print_error "Missing subject in commit message."
        exit 1
    fi

    # General invalid format
    print_error "Invalid commit message format."
    exit 1
fi

# Check if the commit message is too long
TOTAL_LENGTH=$(echo -n "$COMMIT_MSG" | wc -c | tr -d ' ')
if [ "$TOTAL_LENGTH" -gt 88 ]; then
    echo "\033[31mERROR: Commit message is too long (maximum 88 characters).\033[0m" >&2
    echo "" >&2
    echo "Your commit message is $TOTAL_LENGTH characters long." >&2
    exit 1
fi

exit 0